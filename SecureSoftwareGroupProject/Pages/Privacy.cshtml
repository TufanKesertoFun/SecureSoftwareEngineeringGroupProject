@page
@model PrivacyModel
@{
    ViewData["Title"] = "Provider Profiles";
}

<div class="container py-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Provider Profiles</h2>
        <button class="btn btn-primary" type="button" onclick="openCreate()">New Provider</button>
    </div>

    <table id="providersTable" class="table table-striped table-hover align-middle w-100">
        <thead>
            <tr>
                <th style="width:1%"></th>
                <th>Title</th>
                <th>Business</th>
                <th>Years</th>
                <th>Hourly</th>
                <th>Emergency</th>
                <th class="col-date">Created</th>
                <th style="width:1%">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in Model.Rows)
            {
                <tr data-id="@p.Id">
                    <td></td>
                    <td>@p.ProfessionalTitle</td>
                    <td>@p.BusinessName</td>
                    <td>@p.YearsExperience</td>
                    <td>@(p.HourlyRateAmount?.ToString("C") ?? "-")</td>
                    <td>@(p.EmergencyAvailableFlag == true ? "Yes" : "No")</td>
                    <td>@(p.CreatedAtUtc?.ToLocalTime().ToString("yyyy-MM-dd") ?? "")</td>
                    <td class="text-nowrap">
                        <button class="btn btn-sm btn-outline-primary" onclick="openEdit('@p.Id')">Edit</button>
                        <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                onclick="prepDelete('@p.Id', '@(p.BusinessName ?? p.ProfessionalTitle)')">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Edit/Create Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="editLabel" class="modal-title">Edit Provider</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <!-- Create Form -->
                <form id="createForm" method="post" asp-page-handler="Create" class="needs-validation" novalidate>
                    @Html.AntiForgeryToken()
                    <partial name="_ProviderForm" model="Model.Form" />
                    <div class="mt-3 d-flex gap-2">
                        <button class="btn btn-primary" type="submit">Create</button>
                        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>

                <!-- Update Form -->
                <form id="updateForm" method="post" asp-page-handler="Update" class="needs-validation d-none" novalidate>
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Form.Id" />
                    <partial name="_ProviderForm" model="Model.Form" />
                    <div class="mt-3 d-flex gap-2">
                        <button class="btn btn-primary" type="submit">Save</button>
                        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" asp-page-handler="Delete" class="modal-content">
            @Html.AntiForgeryToken()
            <div class="modal-header">
                <h5 id="deleteLabel" class="modal-title">Delete Provider</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="deleteId" name="id" />
                <p>Are you sure you want to delete <strong id="deleteName">this provider</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" type="submit">Delete</button>
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <!-- jQuery + unobtrusive validation -->
    <partial name="_ValidationScriptsPartial" />

    <!-- Bootstrap (if not already in _Layout) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            crossorigin="anonymous"></script>

    <!-- DataTables (Bootstrap 5 build) -->
    <link rel="stylesheet"
          href="https://cdn.datatables.net/v/bs5/dt-2.1.4/r-3.0.3/b-3.1.1/b-html5-3.1.1/b-print-3.1.1/datatables.min.css" />
    <script src="https://cdn.datatables.net/v/bs5/dt-2.1.4/r-3.0.3/b-3.1.1/b-html5-3.1.1/b-print-3.1.1/datatables.min.js"></script>

    <script>
        // ----- references to modal/forms (your pattern)
        const editModal  = document.getElementById('editModal');
        const label      = document.getElementById('editLabel');
        const createForm = document.getElementById('createForm');
        const updateForm = document.getElementById('updateForm');

        function resetForms(){
            if (createForm) { createForm.reset(); createForm.classList.remove('was-validated'); }
            if (updateForm) { updateForm.reset(); updateForm.classList.remove('was-validated'); }
            const id = updateForm?.querySelector('input[name="Form.Id"]');
            if (id) id.value = '';
        }

        // Create
        window.openCreate = function(){
            resetForms();
            label.textContent = 'New Provider';
            createForm.classList.remove('d-none');
            updateForm.classList.add('d-none');
            new bootstrap.Modal(editModal).show();
        };

        // Edit (AJAX -> hydrate -> show)
        window.openEdit = async function(id){
            resetForms();
            label.textContent = 'Edit Provider';
            createForm.classList.add('d-none');
            updateForm.classList.remove('d-none');

            const url = '@Url.Page("ProviderProfiles", "Load", new { id = "__ID__" })'.replace('__ID__', id);
            const resp = await fetch(url, { headers: { 'Accept': 'application/json' }});
            if (!resp.ok) { alert('Failed to load provider.'); return; }
            const p = await resp.json();
            hydrateForm(updateForm, p);

            new bootstrap.Modal(editModal).show();
        };

        // Map JSON -> form fields named Form.*
        function hydrateForm(form, data){
            for (const [k, v] of Object.entries(data)){
                const el = form.querySelector(`[name="Form.${k}"]`);
                if (!el) continue;
                if (el.type === 'checkbox') el.checked = !!v;
                else if (el.type === 'date' && v) el.value = (v ?? '').toString().substring(0,10);
                else el.value = v ?? '';
            }
        }

        // Delete prep
        window.prepDelete = function(id, name){
            document.getElementById('deleteId').value = id;
            document.getElementById('deleteName').textContent = name || 'this provider';
        };

        // Bootstrap client validation
        (function () {
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', function (e) {
                    if (!form.checkValidity()) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();

        // DataTables init
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.getElementById('providersTable');
            if (!table) return;

            const dt = new DataTable(table, {
                responsive: true,
                paging: true,
                ordering: true,
                searching: true,
                pageLength: 10,
                lengthMenu: [10, 25, 50, 100],
                layout: {
                    topStart: 'pageLength',
                    topEnd: 'search',
                    bottomStart: 'info',
                    bottomEnd: 'paging',
                    top: {
                        buttons: [
                            {
                                extend: 'copy',
                                text: '<span class="material-icons-outlined align-middle me-1">content_copy</span><span>Copy</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            },
                            {
                                extend: 'csv',
                                text: '<span class="material-icons-outlined align-middle me-1">grid_on</span><span>CSV</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            },
                            {
                                extend: 'excel',
                                text: '<span class="material-icons-outlined align-middle me-1">table_view</span><span>Excel</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            },
                            {
                                extend: 'print',
                                text: '<span class="material-icons-outlined align-middle me-1">print</span><span>Print</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            }
                        ]
                    }
                },
                columnDefs: [
                    { targets: 0, orderable: false },
                    { targets: 'col-date', render: function (data) {
                        if (!data) return '';
                        const d = new Date(data);
                        if (isNaN(d)) return data;
                        return d.toLocaleDateString();
                    }}
                ]
            });
        });
    </script>
}
