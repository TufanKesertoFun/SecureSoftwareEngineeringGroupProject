@page
@model SecureSoftwareGroupProject.Pages.CustomerReviewsModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "Customer Reviews";
}

<div class="container py-3">
    <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center gap-3 mb-3">
        <div>
            <h2 class="mb-0">Customer Reviews</h2>
            <p class="text-muted mb-0">Track feedback from active customers and keep proof shots on file.</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-primary" type="button" onclick="openCreate()">New Review</button>
        </div>
    </div>

    <table id="reviewsTable" class="table table-striped table-hover align-middle w-100">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Rating</th>
                <th>Review</th>
                <th>Image</th>
                <th class="col-date">Created</th>
                <th style="width:1%">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Model.Reviews)
            {
                <tr data-id="@review.Id"
                    data-image="@review.ImagePath"
                    data-rating="@review.Rating">
                    <td>@review.CustomerName</td>
                    <td>
                        <span class="star-rating" data-rating="@review.Rating">
                            @for (var i = 1; i <= 5; i++)
                            {
                                if (i <= review.Rating)
                                {
                                    <span class="material-icons-outlined text-warning">star</span>
                                }
                                else
                                {
                                    <span class="material-icons-outlined text-muted">star_outline</span>
                                }
                            }
                        </span>
                    </td>
                    <td class="review-text">@review.ReviewText</td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(review.ImagePath))
                        {
                            <a href="@review.ImagePath" target="_blank" rel="noopener" class="d-inline-flex align-items-center gap-2 review-image-link">
                                <img src="@review.ImagePath" class="img-thumbnail review-thumb" alt="Review image for @review.CustomerName" />
                                <span class="small text-muted d-none d-md-inline">View</span>
                            </a>
                        }
                        else
                        {
                            <span class="text-muted small">No file</span>
                        }
                    </td>
                    <td>@review.CreatedAtUtc.ToLocalTime().ToString("yyyy-MM-dd")</td>
                    <td class="text-nowrap">
                        <button class="btn btn-sm btn-outline-primary" onclick="openEdit('@review.Id')">Edit</button>
                        <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                onclick="prepDelete('@review.Id', '@review.CustomerName')">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Create / Update Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="reviewModalLabel" class="modal-title">New Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createForm" class="needs-validation" novalidate method="post" asp-page-handler="Create" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    @{
                        ViewData["ActiveCustomers"] = Model.ActiveCustomers;
                        ViewData["FormContext"] = "create";
                    }
                    <partial name="_CustomerReviewForm" model="Model.Form" />
                    <div class="mt-3 d-flex gap-2">
                        <button class="btn btn-primary" type="submit">Create</button>
                        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>

                <form id="updateForm" class="needs-validation d-none" novalidate method="post" asp-page-handler="Update" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    @{
                        ViewData["ActiveCustomers"] = Model.ActiveCustomers;
                        ViewData["FormContext"] = "update";
                    }
                    <partial name="_CustomerReviewForm" model="Model.Form" />
                    <div class="mt-3 d-flex gap-2">
                        <button class="btn btn-primary" type="submit">Save</button>
                        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" asp-page-handler="Delete" class="modal-content">
            @Html.AntiForgeryToken()
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" name="id" id="deleteId" />
                <p>Are you sure you want to remove the review from <strong id="deleteName">this customer</strong>?</p>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-danger">Delete</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <!-- DataTables (Bootstrap 5 build) -->
    <link rel="stylesheet"
          href="https://cdn.datatables.net/v/bs5/dt-2.1.4/r-3.0.3/b-3.1.1/b-html5-3.1.1/b-print-3.1.1/datatables.min.css" />
    <script src="https://cdn.datatables.net/v/bs5/dt-2.1.4/r-3.0.3/b-3.1.1/b-html5-3.1.1/b-print-3.1.1/datatables.min.js"></script>

    <script>
        const reviewModal = document.getElementById('reviewModal');
        const modalTitle  = document.getElementById('reviewModalLabel');
        const createForm  = document.getElementById('createForm');
        const updateForm  = document.getElementById('updateForm');

        function resetForms() {
            if (createForm) { createForm.reset(); createForm.classList.remove('was-validated'); }
            if (updateForm) { updateForm.reset(); updateForm.classList.remove('was-validated'); }

            const idField = updateForm?.querySelector('input[name="Form.Id"]');
            if (idField) idField.value = '';

            const imgPathFields = reviewModal.querySelectorAll('[data-existing-image-path]');
            imgPathFields.forEach(input => { input.value = ''; });

            const imageBlocks = reviewModal.querySelectorAll('.existing-image-block');
            imageBlocks.forEach(block => { block.style.display = 'none'; });

            const imagePreviews = reviewModal.querySelectorAll('[data-existing-image]');
            imagePreviews.forEach(img => { img.src = ''; });

            const removeChecks = reviewModal.querySelectorAll('[data-remove-image]');
            removeChecks.forEach(cb => { cb.checked = false; });
        }

        window.openCreate = function () {
            resetForms();
            modalTitle.textContent = 'New Review';
            createForm.classList.remove('d-none');
            updateForm.classList.add('d-none');
            new bootstrap.Modal(reviewModal).show();
        };

        window.openEdit = async function (id) {
            resetForms();
            modalTitle.textContent = 'Edit Review';
            createForm.classList.add('d-none');
            updateForm.classList.remove('d-none');

            const url = '@Url.Page("CustomerReviews", "Load", new { id = "__ID__" })'.replace('__ID__', id);
            const resp = await fetch(url, { headers: { 'Accept': 'application/json' } });
            if (!resp.ok) { alert('Failed to load review.'); return; }

            const data = await resp.json();
            hydrateForm(updateForm, data);
            new bootstrap.Modal(reviewModal).show();
        };

        function hydrateForm(form, data) {
            for (const [key, value] of Object.entries(data)) {
                const input = form.querySelector(`[name="Form.${key}"]`);
                if (!input) continue;

                if (input.type === 'checkbox') {
                    input.checked = !!value;
                } else if (input.tagName === 'SELECT') {
                    input.value = value ?? '';
                } else if (input.tagName === 'TEXTAREA') {
                    input.value = value ?? '';
                } else {
                    input.value = value ?? '';
                }
            }

            const pathInput = form.querySelector('[data-existing-image-path]');
            const imageBlock = form.querySelector('.existing-image-block');
            const imgPreview = form.querySelector('[data-existing-image]');
            const removeCheckbox = form.querySelector('[data-remove-image]');

            if (pathInput && imageBlock && imgPreview) {
                if (data.imagePath) {
                    pathInput.value = data.imagePath;
                    imgPreview.src = data.imagePath;
                    imageBlock.style.display = 'block';
                } else {
                    pathInput.value = '';
                    imgPreview.src = '';
                    imageBlock.style.display = 'none';
                }
            }

            if (removeCheckbox) {
                removeCheckbox.checked = false;
            }
        }

        window.prepDelete = function (id, name) {
            document.getElementById('deleteId').value = id;
            document.getElementById('deleteName').textContent = name || 'this customer';
        };

        (function () {
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();

        document.addEventListener('DOMContentLoaded', function () {
            const table = document.getElementById('reviewsTable');
            if (!table) return;

            new DataTable(table, {
                responsive: true,
                paging: true,
                ordering: true,
                searching: true,
                pageLength: 10,
                lengthMenu: [10, 25, 50, 100],
                layout: {
                    topStart: 'pageLength',
                    topEnd: 'search',
                    bottomStart: 'info',
                    bottomEnd: 'paging',
                    top: {
                        buttons: [
                            {
                                extend: 'copy',
                                text: '<span class="material-icons-outlined align-middle me-1">content_copy</span><span>Copy</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            },
                            {
                                extend: 'csv',
                                text: '<span class="material-icons-outlined align-middle me-1">grid_on</span><span>CSV</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            },
                            {
                                extend: 'excel',
                                text: '<span class="material-icons-outlined align-middle me-1">table_view</span><span>Excel</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            },
                            {
                                extend: 'print',
                                text: '<span class="material-icons-outlined align-middle me-1">print</span><span>Print</span>',
                                className: 'btn btn-light btn-sm dt-action-btn'
                            }
                        ]
                    }
                },
                columnDefs: [
                    {
                        targets: 1,
                        orderable: false
                    },
                    {
                        targets: 'col-date',
                        render: function (data) {
                            if (!data) return '';
                            const parsed = new Date(data);
                            if (isNaN(parsed)) return data;
                            return parsed.toLocaleDateString();
                        }
                    }
                ]
            });
        });
    </script>
}
